#0-add_integer.txt

=================================
USING 0-add_integer.py FUNCTION
=================================

Usage
=====

``add_integer(...)``returns the addition of its two arguments.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 4)
	6

::
	>>> add_integer(4, -3)
	1

Note: b has a default value of 98:

::

	>>> add_integer(2)
	100

Floating point numbers:

::

	>>> add_integer(1.3, 2.0)
	3

::

	>>> add_integer(3.0, -1.0)
	2

The function does not work for None:

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

The function will fail if infinity is provided:

::

	>>> add_integer(float('inf')) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf')) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

And again with NaN numbers:

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::
	
	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

